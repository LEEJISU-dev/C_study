1. 링크드 리스트
 
#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;//자기참조 구조체
}node;

node* head = NULL;//전역변수, 포인터라서 초기화
node* tail = NULL;//전역변수
node* inithead();
node* addnode(node* pre, int data);//pre 이전것과 연결
void show();

int main() {
	node* newnode[4];
	head = inithead();
	newnode[0] = addnode(head, 10);
	newnode[1] = addnode(newnode[0], 20);
	newnode[2] = addnode(newnode[1], 30);
	newnode[3] = addnode(newnode[2], 40);
	show();
	return 0;
}

node* inithead(){
	node* tmp = (node*)malloc(sizeof(node));
    tmp->data = 0;
     tmp->link = NULL;
      return tmp;
}
node* addnode(node* pre, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	pre->link = newnode;
	newnode->link = NULL;
	newnode->data = data;
	tail = newnode;
	return newnode;
}
void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d\n", view->data);
		view = view->link;
	}
}

2. 리스트 삽입
#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;
}node;

node* head = NULL;
node* tail = NULL;//전역변수
node* inithead();
node* addnode(node* pre, int data);
void show();
node* insert(node* pre, node* next, int data);

int main() {
	node* newnode[5];
	head = inithead();
	newnode[0] = addnode(head, 10);
	newnode[1] = addnode(newnode[0], 20);
	newnode[2] = addnode(newnode[1], 30);
	newnode[3] = addnode(newnode[2], 40);
	newnode[4] = insert(newnode[0], newnode[1], 15);
	show();
	
	return 0;
}

node* inithead(){
	node* tmp = (node*)malloc(sizeof(node));
    tmp->data = 0;
     tmp->link = NULL;
      return tmp;
}
node* addnode(node* pre, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	pre->link = newnode;
	newnode->link = NULL;
	newnode->data = data;
	tail = newnode;
	return newnode;
}
void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d\n", view->data);
		view = view->link;
	}
}

node* insert(node* pre, node* next, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	pre->link = newnode;
	newnode->data = data;
	newnode->link = next;
	return newnode;
}

노드 하나만 가지고 삽입

node* insertnode(node* pre, int data){
	node* newnode = (node*)malloc(sizeof(node));
    newnode->link=pre->link;
	pre->link = newnode;
	newnode->data = data;
	return newnode;
}

3.노드 삭제

#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;
}node;

node* head = NULL;
node* tail = NULL;//전역변수
node* inithead();
node* addnode(node* pre, int data);
void show();
node* insert(node* pre, node* next, int data);
void delnode(node*predel);

int main() {
	node* newnode[5];
	head = inithead();
	newnode[0] = addnode(head, 10);
	newnode[1] = addnode(newnode[0], 20);
	newnode[2] = addnode(newnode[1], 30);
	newnode[3] = addnode(newnode[2], 40);
	newnode[4] = insert(newnode[0], newnode[1], 15);
	show();
	printf("\n");
	delnode(newnode[0]);
	show();

	return 0;
}

node* inithead() {
	node* tmp = (node*)malloc(sizeof(node));
	tmp->data = 0;
	tmp->link = NULL;
	return tmp;
}
node* addnode(node* pre, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	pre->link = newnode;
	newnode->link = NULL;
	newnode->data = data;
	tail = newnode;
	return newnode;
}
void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d\n", view->data);
		view = view->link;
	}
}

node* insert(node* pre, node* next, int data) {
	node* newnode = (node*)malloc(sizeof(node));
	pre->link = newnode;
	newnode->data = data;
	newnode->link = next;
	return newnode;
}
void delnode(node* delpre) {
	node* del = delpre->link;
	delpre->link = del->link;
	free(del);
}


4. 리스트 (다른방법)-메뉴구상(배열보다 편함)
#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;
}node;

node* head;
node* tail;
node* inithead();
void addnode(int val);
void show();

int main() {
	head = inithead();
	addnode(10);
	addnode(20);
	addnode(30);
	addnode(40);
	addnode(50);

	show();
	return 0;
}

node* inithead() {
	node* tmp = (node*)malloc(sizeof(node));
	tmp->data = 0;
	tmp->link = NULL;
	return tmp;
}
void addnode(int val) {
	node* newnode = (node*)malloc(sizeof(node));
	node* now = head;
	while (now->link != NULL) {
		now = now->link;
	}
	now->link = newnode;
	newnode->link = NULL;
	newnode->data = val;
	tail = newnode;
}
void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d\n", view->data);
		view = view->link;
	}
}

[숙제] 삽입 / 삭제 //리스트만들기 연습

[스택]

#include <stdio.h>
#include <stdlib.h>
typedef struct stack {
	int data;
	struct stack* prelink;//이전
	struct stack* link;//다음
}stack;

stack* head = NULL;
stack* top = NULL;
stack* inithead();
void push(int data);
int pop();
void show();

int main() {
	head = inithead();

	push(10);
	push(20);
	show();
	printf("\n");

	push(30);
	push(40);
	show();
	printf("\n");

	push(50);
	show();
	printf("\n");

	pop();
	show();
	printf("\n");

	return 0;
}
stack* inithead() {
	stack* tmp = (stack*)malloc(sizeof(stack));
	tmp->data = 0;
	tmp->prelink = NULL;
	tmp->link = NULL;
	return tmp;
}
void push(int data) {
	stack* newnode = (stack*)malloc(sizeof(stack));
	stack* Endnode = top;
	if (head->link == NULL) {
		head->link = newnode;
		newnode->prelink = head;
		newnode->link = NULL;
	}
	else {
		Endnode->link = newnode;
		newnode->prelink = Endnode;
		newnode->link = NULL;
	}
	newnode->data = data;
	top = newnode;
}
/*int pop() {
	stack* del = top;
	stack* delpre = del->prelink;
	int d = del->data;//del이 삭제되기 전 값을 저장
	top = delpre;
	delpre->link = NULL;
	free(del);

	return d;
}*/

int pop() {
	stack* del = top;
	int tmp;
	if (del == NULL) {
		printf("no more data\n");
		return;
	}
	tmp = del->data;
	del->prelink->link = NULL;
	if (del->prelink == head)top = NULL;
	else top = del->prelink;
	free(del);
	return tmp;
}
void show() {
	stack* view = top;
	while (view != head) {
		printf("%d\n", view->data);
		view =view->prelink;
	}
}

[스택 메뉴]

#include <stdio.h>
#include <stdlib.h>
typedef struct stack {
	int data;
	struct stack* prelink;//이전
	struct stack* link;//다음
}stack;

stack* head = NULL;
stack* top = NULL;
stack* inithead();
void push(int data);
int pop();
void show();

int main() {
	head = inithead();
	int sel = 1;
	int num = 1;
	while (sel != 0) {
		printf("menu: 1. push 2. pop 0. quit");
		scanf("%d", &sel);
		switch (sel)
		{
		case 1:			
                      push(num);			
                      num++;			
                      show();			
                      break;
		case 2:			
                      pop();			
                      if (num == 0) {				
                      num = 0;		
                       }			
                      else num--;			
                      show();			
                      break;
		case 0:			
                      printf("종료");		
                      break;
		}
	}

	return 0;
}
stack* inithead() {
	stack* tmp = (stack*)malloc(sizeof(stack));
	tmp->data = 0;
	tmp->prelink = NULL;
	tmp->link = NULL;
	return tmp;
}
void push(int data) {
	stack* newnode = (stack*)malloc(sizeof(stack));
	stack* Endnode = top;
	if (head->link == NULL) {
		head->link = newnode;
		newnode->prelink = head;
		newnode->link = NULL;
	}
	else {
		Endnode->link = newnode;
		newnode->prelink = Endnode;
		newnode->link = NULL;
	}
	newnode->data = data;
	top = newnode;
}

int pop() {
	stack* del = top;
	int tmp;
	if (del == NULL) {
		printf("no more data\n");
		return;
	}
	tmp = del->data;
	del->prelink->link = NULL;
	if (del->prelink == head)top = NULL;
	else top = del->prelink;
	free(del);

	return tmp;
}
void show() {
	stack* view = top;
        if(view==null) return;
	while (view != head) {
		printf("%d\n", view->data);
		view =view->prelink;
	}
}

[큐]

#include <stdio.h>
#include <stdlib.h>
typedef struct queue {
	int data;
	struct queue* prelink;//이전
	struct queue* link;//다음
}queue;

queue* head = NULL;
queue* front = NULL;
queue* rear = NULL;
queue* inithead();
void enqueue(int data);
int dequeue();
void show();

int main() {
	head = inithead();
	
	enqueue(10);
	enqueue(20);
	enqueue(30);
	show();
	printf("\n");

	dequeue();
	show();
	printf("\n");

	return 0;
}

queue* inithead() {
	queue* tmp = (queue*)malloc(sizeof(queue));
	tmp->data = 0;
	tmp->link = NULL;
	tmp->prelink = NULL;
	return tmp;
}
void enqueue(int data) {
	queue* newnode = (queue*)malloc(sizeof(queue));
	queue* Endnode = rear;
	if (head->link == NULL) {
		head->link = newnode;
		newnode->prelink = head;
		newnode->link = NULL;
		front = newnode;
		}
	else {
		Endnode->link = newnode;
		newnode->prelink = Endnode;
		newnode->link = NULL;
	}
	newnode->data = data;
	rear=newnode;
}
/*int dequeue() {
	queue* del = front;
	int tmp;
	tmp = del->data;
	del->link->prelink = head;
	head->link = del->link;
	front = del->link;
	free(del);

	return tmp;
}*/
int dequeue() {
	queue* del = front;
	int tmp;
	if ((front == NULL) && (rear == NULL)) {
		printf("no more data\n");
		return;
	}
	tmp = del->data;
	
	head->link = del->link;
	if (rear == front) {
		rear = NULL;
		front = NULL;
	}
	else {
		del->link->prelink = head;
		front = del->link;
	}
	free(del);

	return tmp;
}
void show() {
	queue* view = rear;
        if (view == NULL)return;
	while (view != head) {
		printf("%d\n", view->data);
		view = view->prelink;
	}
}

[스택& 큐]//숙제

#include <stdio.h>
#include <stdlib.h>

typedef struct stack {
	int data;
	struct stack* prelink;
	struct stack* link;
}stack;

typedef struct queue {
	int data;
	struct queue* prelink;//이전
	struct queue* link;//다음
}queue;

stack* head = NULL;
stack* top = NULL;
stack* inithead();
void push(int data);
int pop();

queue* head = NULL;
queue* front = NULL;
queue* rear = NULL;
queue* inithead();
void enqueue(int data);
int dequeue();
void show();

int main() {
	head = inithead();

	int sel = 1;
	int stnum = 1;
	int qunum = 1;
	while (sel != 0) {
		printf("menu: 1. enqueue 2. dequeue 0. quit");
		scanf("%d", &sel);
		switch (sel)
		{
		case 1:
			push(stnum);
			enqueue(qunum);
			stnum++;
			qunum++;
			show();
			break;
		case 2:
			dequeue();
			pop();
			if (stnum == 0) {
				stnum = 0;
			}
			else stnum--;
			show();
			break;
		case 0:
			printf("종료");
			break;
		}
	}
	return 0;
}

stack* inithead() {
	stack* tmp = (stack*)malloc(sizeof(stack));
	tmp->data = 0;
	tmp->prelink = NULL;
	tmp->link = NULL;
	return tmp;
}

queue* inithead() {
	queue* tmp = (queue*)malloc(sizeof(queue));
	tmp->data = 0;
	tmp->link = NULL;
	tmp->prelink = NULL;
	return tmp;
}
void push(int data) {
	stack* newnode = (stack*)malloc(sizeof(stack));
	stack* Endnode = top;
	if (head->link == NULL) {
		head->link = newnode;
		newnode->prelink = head;
		newnode->link = NULL;
	}
	else {
		Endnode->link = newnode;
		newnode->prelink = Endnode;
		newnode->link = NULL;
	}
	newnode->data = data;
	top = newnode;
}
void enqueue(int data) {
	queue* newnode = (queue*)malloc(sizeof(queue));
	queue* Endnode = rear;
	if (head->link == NULL) {
		head->link = newnode;
		newnode->prelink = head;
		newnode->link = NULL;
		front = newnode;
	}
	else {
		Endnode->link = newnode;
		newnode->prelink = Endnode;
		newnode->link = NULL;
	}
	newnode->data = data;
	rear = newnode;
}
int pop() {
	stack* del = top;
	int tmp;
	if (del == NULL) {
		printf("no more data\n");
		return;
	}
	tmp = del->data;
	del->prelink->link = NULL;
	if (del->prelink == head)top = NULL;
	else top = del->prelink;
	free(del);

	return tmp;
}
int dequeue() {
	queue* del = front;
	int tmp;
	if ((front == NULL) && (rear == NULL)) {
		printf("no more data\n");
		return;
	}
	tmp = del->data;
	
	head->link = del->link;
	if (rear == front) {
		rear = NULL;
		front = NULL;
	}
	else {
		del->link->prelink = head;
		front = del->link;
	}
	free(del);

	return tmp;
}
void show() {//이부분만 수정하기

	stack* viewqu = top;
	queue* viewst = rear;
	if (viewqu == NULL)return;

	while (view != head) {
		printf("stack :%d  queue :%d\n", view->data, view->data);
		view = view->prelink;
	}
}

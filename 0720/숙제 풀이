#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;

}node;

node* head = NULL;
node* tail = NULL;
node* inithead();
void show();
void addnode(int data);
void selectsort(node* n);
void bubblesort(node* n);
void insertsort(node* n);

int main() {
	head = inithead();

	addnode(5);
	addnode(2);
	addnode(7);
	addnode(3);
	addnode(6);
	addnode(1);
	addnode(8);
	addnode(4);

	selectsort(head);
	show();
	printf("\n");

	bubblesort(head);
	show();
	printf("\n");

	insertsort(head);
	show();
	printf("\n");

	return 0;
}
node* inithead() {
	node* tmp = (node*)malloc(sizeof(node));
	tmp->data = 0;
	tmp->link = NULL;
	return tmp;
}

void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d ", view->data);
		view = view->link;
	}
}
void addnode(int data) {
	node* newnode = (node*)malloc(sizeof(node));
	node* now = head;
	while (now->link != NULL) {
		now = now->link;
	}
	now->link = newnode;
	newnode->link = NULL;
	newnode->data = data;
	tail = newnode;
}
void selectsort(node* n) {
	node* std = n->link;
	node* cmp = NULL;
	int tmp;
	while (std != NULL) {
		cmp = std->link;
		while (cmp != NULL) {
			if (std->data > cmp->data) {
				tmp = std->data;
				std->data = cmp->data;
				cmp->data = tmp;
			}
			cmp = cmp->link;
		}
		std = std->link;
	}
}
void bubblesort(node* n) {
	node* std = n->link;
	node* cmp = NULL;
	node* end = tail;
	int tmp;
	while (std != cmp) {
		cmp = std;
		while (cmp != end) {
			if (cmp->data > cmp->link->data) {
				tmp = cmp->data;
				cmp->data = cmp->link->data;
				cmp->link->data = tmp;
		       }
			cmp = cmp->link;
	    }
		end = cmp->prelink;//이중리스트
		}
		
	}


void insertsort(node* n) {
	
	node* std = n->link->link;
	node* cmp = NULL;
	node* ntmp = NULL;
	int tmp;
	while (std != NULL) {
		cmp = head->link;
		while (cmp != std) {
			if (std->data < cmp->data) {
				tmp = std->data;
				ntmp = std;
				while (ntmp != cmp) {
					ntmp->data = ntmp->prelink->data;
					ntmp=ntmp->prelink;
				}
				cmp->data = tmp;
			}
			cmp = cmp->link;
		}
		std = std->link;
	}
}

#include <stdio.h>
#include <stdlib.h>

typedef struct list {
	int data;
	struct list* link;

}node;

node* head = NULL;
node* tail = NULL;
node* inithead();
void show();
void addnode(int data);
void selectsort(node* n);
void bubblesort(node* n);
void insertsort(node* n);

int main() {
	head = inithead();

	addnode(5);
	addnode(2);
	addnode(7);
	addnode(3);
	addnode(6);
	addnode(1);
	addnode(8);
	addnode(4);

	selectsort(head);
	show();
	printf("\n");

	bubblesort(head);
	show();
	printf("\n");

	insertsort(head);
	show();
	printf("\n");

	return 0;
}
node* inithead() {
	node* tmp = (node*)malloc(sizeof(node));
	tmp->data = 0;
	tmp->link = NULL;
	return tmp;
}

void show() {
	node* view = head->link;
	while (view != NULL) {
		printf("%d ", view->data);
		view = view->link;
	}
}
void addnode(int data) {
	node* newnode = (node*)malloc(sizeof(node));
	node* now = head;
	while (now->link != NULL) {
		now = now->link;
	}
	now->link = newnode;
	newnode->link = NULL;
	newnode->data = data;
	tail = newnode;
}
void selectsort(node* n) {
	node* std = n->link;
	node* cmp = NULL;
	int tmp;
	while (std != NULL) {
		cmp = std->link;
		while (cmp != NULL) {
			if (std->data > cmp->data) {
				tmp = std->data;
				std->data = cmp->data;
				cmp->data = tmp;
			}
			cmp = cmp->link;
		}
		std = std->link;
	}
}
void bubblesort(node* n) {
	node* std=n->link;
	node* cmp = NULL;
	int tmp, swap;
	if (std == NULL)return;
	do {
		swap = 0;
		std = head;

		while (std->link != cmp) {
			if (std->data > std->link->data) {
				tmp = std->data;
				std->data = std->link->data;
				std->link->data = tmp;
				swap = 1;
			}
			std = std->link;
		}
		cmp = std;
	} while (swap);
}
void insertsort(node* n) {
	if (n == NULL || n->link == NULL) return;
	node* std = n->link;
	while (std != NULL) {
		int i = 0;
		while (n != std) {
			if (n->data > std->data && i == 0) {
				std->data = n->data;
				n->data = std->data;
				i = 1;
				n = n->link;
			}
			else {
				if (i == 1) {
					int tmp = std->data;
					std->data = n->data;
					n->data = tmp;
				}

				n = n->link;
			}
		}
		n->data = std->data;
		std = std->link;
	}

}
